name: deployment

on:
  workflow_dispatch:
    
  push:
    branches: [ "main" ]

jobs:
  kubernetes:
    runs-on: ubuntu-latest
    env:
      NAMESPACE: student-10  

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'

      - name: Write kubeconfig and export path
        run: |
          echo "${{ secrets.KUBECONFIG }}" | base64 -d > "${{ runner.temp }}/kubeconfig"
          chmod 600 "${{ runner.temp }}/kubeconfig"
          echo "KUBECONFIG=${{ runner.temp }}/kubeconfig" >> "$GITHUB_ENV"
      - name: Sanity check cluster/context
        run: |
          kubectl config current-context
          kubectl cluster-info
      - name: Ensure namespace exists
        run: |
          kubectl get ns "$NAMESPACE" >/dev/null 2>&1 || kubectl create ns "$NAMESPACE"
      - name: Deploy manifests
        run: |
          kubectl -n "$NAMESPACE" apply -f ./kubernetes/backend-deployment.yaml
          kubectl -n "$NAMESPACE" apply -f ./kubernetes/frontend-deployment.yaml
      - name: Verify rollout
        run: |
          kubectl -n "$NAMESPACE" get deployments
          kubectl -n "$NAMESPACE" rollout status deploy/backend --timeout=180s
          kubectl -n "$NAMESPACE" rollout status deploy/frontend --timeout=180s
  smoke_test:
    runs-on: ubuntu-latest
    env:
      NAMESPACE: student-10
      FRONTEND_SVC: frontend
      BACKEND_SVC: backend
      FRONT_LOCAL: 8080
      BACK_LOCAL: 9000
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG }}" | base64 -d > ~/.kube/config

      - name: Smoke Test
        run: |
          set -euo pipefail

          FRONT_PORT=$(kubectl -n "$NAMESPACE" get svc "$FRONTEND_SVC" -o jsonpath='{.spec.ports[0].port}')
          BACK_PORT=$(kubectl -n "$NAMESPACE" get svc "$BACKEND_SVC" -o jsonpath='{.spec.ports[0].port}')

          kubectl -n "$NAMESPACE" port-forward svc/"$FRONTEND_SVC" "$FRONT_LOCAL":"$FRONT_PORT" >/tmp/pf-frontend.log 2>&1 &
          PF1=$!
          kubectl -n "$NAMESPACE" port-forward svc/"$BACKEND_SVC" "$BACK_LOCAL":"$BACK_PORT" >/tmp/pf-backend.log 2>&1 &
          PF2=$!

          cleanup() { kill "$PF1" "$PF2" >/dev/null 2>&1 || true; }
          trap cleanup EXIT

          sleep 5 # give port-forward time to start

          curl -fsS -m 10 "http://16.170.141.214:30901"

          echo "Success: both endpoints reachable!"

      - name: Stress test frontend
        run: |
          docker run --rm rufus/siege-engine siege -c25 -t30s http://16.170.141.214:30901

      - name: Deploy Helm charts
        run: |
          helm upgrade --install backend ./charts/backend -n "$NAMESPACE"
          helm upgrade --install frontend ./charts/frontend -n "$NAMESPACE"
